name: SlideshowFX
on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'
    paths-ignore:
      - '.editorconfig'
      - '.gitignore'
      - 'examples/**'
      - 'Dockerfile'
      - 'LICENSE'
      - 'README.md'
      - 'src/**'

env:
  PRODUCT_VERSION: "2020.1"

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      OS_NAME: ubuntu-latest
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_LOGIN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Listing JVMs to use
        run: python .github/workflows/ci.py --jvms
      - name: Cache JDK installations
        uses: actions/cache@v2
        with:
          path: "${{ env.HOME }}/.jvms"
          key: ubuntu-latest-jvms-${{ hashFiles('jvms.list') }}
      - name: Cache gradle dependencies
        uses: actions/cache@v2
        with:
          path: "${{ env.HOME }}/.gradle"
          key: ubuntu-latest-gradle-${{ hashFiles('**/*.gradle*') }}
      - name: Run tests
        id: tests
        run: |
          echo ::set-output name=report_name::reports-$(echo -n $GITHUB_REF | sed -E "s/refs\/(heads|tags)\///g")-$(date +'%Y%m%dT%H%M%S')
          echo ::set-output name=execution_time::$(date +'%Y%m%dT%H%M%S')
          python .github/workflows/ci.py --setup --gradle "-q check sonarqube"
      - uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: ${{ steps.tests.outputs.report_name }}
          path: "**/reports/"

  package:
    needs: [test]
    runs-on: ${{ matrix.os }}
    if: success() && contains(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [macos-latest,windows-latest,ubuntu-latest]
    env:
      OS_NAME: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Listing JVMs to use
        run: python .github/workflows/ci.py --jvms
      - name: Cache JDK installations
        uses: actions/cache@v2
        with:
          path: "${{ env.HOME }}/.jvms"
          key: ubuntu-latest-jvms-${{ hashFiles('jvms.list') }}
      - name: Cache gradle dependencies
        uses: actions/cache@v2
        with:
          path: "${{ env.HOME }}/.gradle"
          key: ubuntu-latest-gradle-${{ hashFiles('**/*.gradle*') }}
      - name: Package
        run: python .github/workflows/ci.py --setup --gradle "-q bundle :slideshowfx-setup:distZip"
      - uses: actions/upload-artifact@v2
        if: success()
        with:
          name: setup-package-${{ matrix.os }}
          path: slideshowfx-setup/build/distributions/*.zip

  release:
    needs: [test, package]
    runs-on: ubuntu-latest
    if: success() && contains(github.ref, 'refs/tags/')
    env:
      PACKAGES_PATH: packages
    steps:
      - uses: actions/checkout@v2
      - run: mkdir -p $PACKAGES_PATH
      - name: Retrieve OSX setup package
        uses: actions/download-artifact@v2
        with:
          name: setup-package-macos-latest
          path: ${{ env.PACKAGES_PATH }}
      - name: Retrieve Windows setup package
        uses: actions/download-artifact@v2
        with:
          name: setup-package-windows-latest
          path: ${{ env.PACKAGES_PATH }}
      - name: Retrieve Unix setup package
        uses: actions/download-artifact@v2
        with:
          name: setup-package-ubuntu-latest
          path: ${{ env.PACKAGES_PATH }}
      - name: Read release notes
        id: release_notes
        run: |
          TAG_NAME=$(echo -n $GITHUB_REF | sed -E "s/refs\/(heads|tags)\///g")
          RELEASE_NOTES_CONTENT=$(cat release-notes/${TAG_NAME}.md)
          RELEASE_NOTES_CONTENT="${RELEASE_NOTES_CONTENT//$'\n'/'%0A'}"
          RELEASE_NOTES_CONTENT="${RELEASE_NOTES_CONTENT//$'\r'/'%0D'}"
          echo ::set-output name=content::$RELEASE_NOTES_CONTENT
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: SlideshowFX ${{ env.PRODUCT_VERSION }}
          body: |
            ${{ steps.release_notes.outputs.content }}
          draft: true
          prerelease: false
      - name: Attaching OSX setup package
        uses: actions/upload-release-asset@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PACKAGES_PATH }}/SlideshowFXSetup-${{ env.PRODUCT_VERSION }}-osx.zip
          asset_name: SlideshowFXSetup-${{ env.PRODUCT_VERSION }}-osx.zip
          asset_content_type: application/zip
      - name: Attaching Windows setup package
        uses: actions/upload-release-asset@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PACKAGES_PATH }}/SlideshowFXSetup-${{ env.PRODUCT_VERSION }}-windows.zip
          asset_name: SlideshowFXSetup-${{ env.PRODUCT_VERSION }}-windows.zip
          asset_content_type: application/zip
      - name: Attaching Unix setup package
        uses: actions/upload-release-asset@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PACKAGES_PATH }}/SlideshowFXSetup-${{ env.PRODUCT_VERSION }}-unix.zip
          asset_name: SlideshowFXSetup-${{ env.PRODUCT_VERSION }}-unix.zip
          asset_content_type: application/zip