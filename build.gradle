buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.sonarqube'
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
}

def getPlatform() {
    def osProperty = System.properties['os.name'].toLowerCase()

    if (osProperty.startsWith('mac')) {
        return ext.os.MAC
    } else if (osProperty.startsWith('windows')) {
        return ext.os.WINDOWS
    } else if (osProperty.startsWith('linux')) {
        return ext.os.UNIX
    } else {
        return ext.os.UNKNOWN
    }
}

def getArchitecture() {
    return System.properties['os.arch']
}

/**
 * Determine the suffix for a package according the platform and the architecture.
 */
def getPlatformAndArchitecture() {
    return "${getPlatform()}-${getArchitecture()}"
}

ext.os = [
        MAC    : 'osx',
        WINDOWS: 'windows',
        UNIX   : 'unix',
        UNKNOWN: 'unknown'
]

ext.dependencies = [
        asciidoctorj: [version: '2.1.0'],
        box         : [version: '2.34.0'],
        drive       : [version: 'v3-rev20190620-1.30.1'],
        dropbox     : [version: '3.1.1'],
        freemarker  : [version: '2.3.28'],
        jsoup       : [version: '1.12.1'],
        junit       : [version: '5.5.0'],
        markdown    : [version: '0.13'],
        mockito     : [version: '2.26.0'],
        monocle     : [version: '8u76-b04'],
        testfx      : [version: '4.0.15-alpha'],
        vertx       : [version: '3.7.1'],
        wikitext    : [version: '3.0.29'],
        zxing       : [version: '3.4.0']
]

subprojects {

    def javaCallback = {
        compileJava {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }

        sourceSets {
            integrationTest {
                compileClasspath += sourceSets.main.output
                runtimeClasspath += sourceSets.main.output
            }

            gherkinTest {
                compileClasspath += sourceSets.main.output
                runtimeClasspath += sourceSets.main.output
            }
        }

        configurations {
            integrationTestImplementation.extendsFrom implementation
            integrationTestRuntimeOnly.extendsFrom runtimeOnly
            gherkinTestImplementation.extendsFrom implementation
            gherkinTestRuntime.extendsFrom runtime
        }

        dependencies {
            testImplementation "org.junit.jupiter:junit-jupiter-api:${rootProject.ext.dependencies.junit.version}"
            testImplementation "org.junit.jupiter:junit-jupiter-params:${rootProject.ext.dependencies.junit.version}"
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${rootProject.ext.dependencies.junit.version}"

            integrationTestImplementation "org.junit.jupiter:junit-jupiter-api:${rootProject.ext.dependencies.junit.version}"
            integrationTestImplementation "org.junit.jupiter:junit-jupiter-params:${rootProject.ext.dependencies.junit.version}"
            integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${rootProject.ext.dependencies.junit.version}"

            gherkinTestImplementation "org.junit.jupiter:junit-jupiter-api:${rootProject.ext.dependencies.junit.version}"
            gherkinTestImplementation "org.junit.jupiter:junit-jupiter-params:${rootProject.ext.dependencies.junit.version}"
            gherkinTestRuntime "org.junit.jupiter:junit-jupiter-engine:${rootProject.ext.dependencies.junit.version}"
            gherkinTestImplementation 'io.cucumber:cucumber-java8:4.3.1'
            gherkinTestRuntime 'io.cucumber:cucumber-java8:4.3.1'
        }

        test {
            useJUnitPlatform()
        }

        task integrationTest(type: Test, dependsOn: jar) {
            description = 'Runs integration tests.'
            group = 'verification'

            testClassesDirs = sourceSets.integrationTest.output.classesDirs
            classpath = sourceSets.integrationTest.runtimeClasspath

            useJUnitPlatform()
        }

        task gherkinTest(type: Test, dependsOn: [assemble, compileTestJava]) {
            description = 'Runs gherkin tests.'
            group = 'verification'

            testClassesDirs = sourceSets.gherkinTest.output.classesDirs
            classpath = sourceSets.gherkinTest.runtimeClasspath
            
            
            doLast {
                javaexec {
                    def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile
                    jvmArgs = ["-javaagent:$jacocoAgent=destfile=$buildDir/jacoco/${sourceSets.gherkinTest.name}.exec,append=false"]
                    
                    main = "cucumber.api.cli.Main"
                    classpath = configurations.gherkinTestRuntime + sourceSets.main.output + sourceSets.test.output + sourceSets.gherkinTest.output
                    args = ['--plugin', "html:${project.buildDir}/reports/tests/gherkinTest",
                            '--plugin', "junit:${project.buildDir}/test-results/${sourceSets.gherkinTest.name}/TEST-gherkin.xml",
                            '--strict',
                            '--glue', 'gradle.cucumber',
                            "src/${sourceSets.gherkinTest.name}/resources"]
                }
            }
        }

        check.dependsOn test, integrationTest, gherkinTest

        jar {
            manifest {
                attributes += [
                        'Implementation-Vendor': 'Thierry Wasylczenko'
                ]
            }
        }
    }

    def sfxPluginCallback = {
        evaluationDependsOn(':slideshowfx-plugin')

        dependencies {
            integrationTestImplementation project(':slideshowfx-plugin-manager')
            integrationTestImplementation project(':slideshowfx-plugin').sourceSets.integrationTest.output
        }
    }

    def jacocoCallback = {
        jacoco {
            toolVersion = "0.8.4"
        }

        jacocoTestReport {

            getAdditionalSourceDirs().from(sourceSets.integrationTest.allJava.srcDirs, sourceSets.gherkinTest.allJava.srcDirs)

            getExecutionData().setFrom(fileTree("$buildDir/jacoco").matching {
                include "*.exec"
            })

            reports {
                csv.enabled false
                html.enabled true
                xml.enabled true
            }
            
            dependsOn test, integrationTest, gherkinTest
        }
    }

    def sonarqubeCallback = {
        sonarqube {
            properties {
                def integrationTestsDirs = sourceSets.integrationTest.allSource.srcDirs.findAll { it.exists() }
                def gherkinTestsDirs = sourceSets.gherkinTest.allSource.srcDirs.findAll { it.exists() }
                
                def jacocoIntegrationTestResult = "$buildDir/jacoco/${sourceSets.integrationTest.name}.exec"
                def jacocoGherkinTestResult = "$buildDir/jacoco/${sourceSets.gherkinTest.name}.exec"
                
                def junitIntegrationTestReport = "$buildDir/reports/tests/${sourceSets.integrationTest.name}"
                def junitGherkinTestReport = "$buildDir/reports/tests/${sourceSets.gherkinTest.name}"

                if (sourceSets.test.allJava.srcDirs.findAll { it.exists() }.isEmpty()) {
                    properties["sonar.tests"] = integrationTestsDirs + gherkinTestsDirs
                    properties["sonar.jacoco.reportPaths"] = jacocoIntegrationTestResult + jacocoGherkinTestResult
                    properties["sonar.junit.reportPaths"] = junitIntegrationTestReport + junitGherkinTestReport
                } else {
                    properties["sonar.tests"] += integrationTestsDirs + gherkinTestsDirs
                    properties["sonar.jacoco.reportPaths"] += jacocoIntegrationTestResult + jacocoGherkinTestResult
                    properties["sonar.junit.reportPaths"] += junitIntegrationTestReport + junitGherkinTestReport
                }
            }
        }
    }

    plugins.withType(JavaPlugin, javaCallback)
    plugins.withId('sfx-plugin', sfxPluginCallback)
    plugins.withId('jacoco', jacocoCallback)
    plugins.withId('org.sonarqube', sonarqubeCallback)
}

sonarqube {
    properties {
        property "sonar.host.url", System.properties['sonar.host.url'] ?: System.env['SONAR_HOST_URL']
        property "sonar.login", System.properties['sonar.login'] ?: System.env['SONAR_LOGIN']
        property "sonar.projectKey", System.properties['sonar.projectKey'] ?: System.env['SONAR_PROJECT_KEY']
        property "sonar.organization", System.properties['sonar.organization'] ?: System.env['SONAR_ORGANIZATION']
    }
}

tasks.sonarqube.dependsOn {
    subprojects.findAll { it.getPluginManager().hasPlugin('org.sonarqube') }.collect {
        [
                it.tasks.check
        ]
    }.flatten()
}