plugins {
    id 'sfx-plugin'
    id 'jacoco'
    id 'com.jfrog.bintray'
    id 'org.sonarqube'
}

description = 'Extension allowing to insert alerts inside a SlideshowFX presentation'
version = '1.3-SNAPSHOT'

dependencies {
    api project(':slideshowfx-content-extension')
    implementation project(':slideshowfx-icons')
    api project(':slideshowfx-markup')
    api project(':slideshowfx-plugin')
    api project(':slideshowfx-ui-controls')

    testCompile "org.mockito:mockito-core:${rootProject.ext.dependencies.mockito.version}"
}

sfxPlugin {
    contentExtension = true

    bundle {
        name = 'SlideshowFX alert extension'
        symbolicName = 'com.twasyl.slideshowfx.content.extension.alert'
        description = 'Support for inserting alert in slides'
        activator = 'com.twasyl.slideshowfx.content.extension.alert.activator.AlertContentExtensionActivator'
        exportPackage = 'com.twasyl.slideshowfx.content.extension.alert.controllers,com.twasyl.slideshowfx.content.extension.alert,com.twasyl.slideshowfx.content.extension.alert.activator'
        setupWizardLabel = 'Alert'
        setupWizardIconName = 'EXCLAMATION_TRIANGLE'
    }
}

task zipSweetAlertPackage(type: Zip) {
    archiveFileName = "sweetalert2.zip"
    destinationDirectory = file("${buildDir}/tmp")
    from("${buildDir}/tmp/sweetalert-update/sweetalert2") {
        into "sweetalert2"
    }
}

task createSweetAlertPackage() {
    finalizedBy zipSweetAlertPackage

    doLast {
        def sweetAlertVersion = project.findProperty('sweetAlertVersion') ?: ''
        def binaryDir = new File("${buildDir}/tmp/sweetalert-update")
        def newPackageDir = new File("${binaryDir}/sweetalert2", sweetAlertVersion)
        def binary = new File(newPackageDir, "sweetalert2.all.min.js")
        
        if (!newPackageDir.exists()) {
            newPackageDir.mkdirs()
        }
        
        new URL("https://cdn.jsdelivr.net/npm/sweetalert2@${sweetAlertVersion}/dist/sweetalert2.all.min.js").withInputStream { i ->
            binary.withOutputStream {
                it << i
            }
        }
    }
}