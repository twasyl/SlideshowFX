import org.gradle.util.GradleVersion

buildscript {
    dependencies {
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.18'
    }
}

plugins {
    id 'distribution'
    id 'org.asciidoctor.convert' version '1.5.9.2'
}

description = 'SlideshowFX documentation to be included within the application and the setup package'
version = '1.0'

asciidoctorj {
    version = '2.1.0'
}
asciidoctor {
    backends = ['html5', 'pdf']
    attributes = [
            'source-highlighter'           : 'coderay',
            'toc'                          : 'left',
            'icons'                        : 'font',
            'iconfont-remote!'             : '',
            'webfonts!'                    : '',
            'setanchors'                   : '',
            'sectlinks'                    : '',
            'linkcss'                      : 'false',
            'slideshowfx_version'          : "${rootProject.version}",
            'asciidoctor-source'           : "${project.projectDir}/src/asciidoc",
            'javafx-version'               : '8 update 212',
            'jdk-version'                  : '8 update 212',
            'gradle-version'               : "${GradleVersion.current().version}",
            'asciidoctorj-version'         : "${rootProject.ext.dependencies.asciidoctorj.version}",
            'freemarker-version'           : "${rootProject.ext.dependencies.freemarker.version}",
            'jsoup-version'                : "${rootProject.ext.dependencies.jsoup.version}",
            'wikitext-textile-core-version': "${rootProject.ext.dependencies.wikitext.version}",
            'txtmark-version'              : "${rootProject.ext.dependencies.markdown.version}",
            'vertx-version'                : "${rootProject.ext.dependencies.vertx.version}",
            'zxing-jse-version'            : "${rootProject.ext.dependencies.zxing.version}",
            'box-version'                  : "${rootProject.ext.dependencies.box.version}",
            'drive-version'                : "${rootProject.ext.dependencies.drive.version}",
            'dropbox-version'              : "${rootProject.ext.dependencies.dropbox.version}",
            'ace-version'                  : '1.4.5'
    ]
}

build.dependsOn 'asciidoctor'

distributions {
    html {
        baseName = 'slideshowfx-documentation-html'
        contents {
            into('html') {
                from new File(asciidoctor.outputDir, "html5")
            }
        }
    }
    pdf {
        baseName = 'slideshowfx-documentation-pdf'
        contents {
            into('pdf') {
                from new File(asciidoctor.outputDir, "pdf")
                include '*.pdf'
            }
        }
    }
}

htmlDistZip.dependsOn 'asciidoctor'
pdfDistZip.dependsOn 'asciidoctor'
distZip.dependsOn = [htmlDistZip, pdfDistZip]

htmlDistTar.enabled = false
pdfDistTar.enabled = false
distTar.enabled = false

/**
 * Unzip all documentation generated by this project.
 *
 * @param directory The directory where the documentations will be unzipped.
 * @param withoutArchiveRootDir Indicates if the root directory present in the archive must be in the directory.
 * @return
 */
def unzipDocumentationsIn(String directory, boolean withoutArchiveRootDir) {
    _unzipDistTask(htmlDistZip, directory, withoutArchiveRootDir)
    _unzipDistTask(pdfDistZip, directory, withoutArchiveRootDir)
}

def _unzipDistTask(Task task, String directory, boolean withoutArchiveRootDir) {
    task.outputs.files.each { file ->
        copy {
            from zipTree(file)
            into directory
        }
    }

    if (withoutArchiveRootDir) {
        copy {
            from fileTree(dir: "${directory}/${task.baseName}-${version}")
            into directory
        }
        delete "${directory}/${task.baseName}-${version}"
    }
}