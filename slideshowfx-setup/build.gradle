plugins {
    id 'java'
    id 'distribution'
    id 'jacoco'
    id 'org.sonarqube'
    id 'sfx-publisher'
}

description = 'Module for the installer of SlideshowFX'
version = '@@NEXT_VERSION@@'

dependencies {
    compile project(':slideshowfx-global-configuration')
    compile project(':slideshowfx-icons')
    compile project(':slideshowfx-logs')
    compile project(':slideshowfx-ui-controls')
    compile project(':slideshowfx-utils')
}

ext.packaging = [
        extension         : rootProject.ext.os.MAC == rootProject.getPlatform() ? ".app" : "",
        deployOutDir      : new File("${buildDir}/bundle"),
        deployResourcesDir: new File("${buildDir}/tmp/bundles")
]

processResources {
    doLast {
        ant.propertyfile(file: "${buildDir}/resources/main/com/twasyl/slideshowfx/setup/setup.properties") {
            entry(key: 'setup.application.name', value: 'SlideshowFX')
            entry(key: 'setup.application.version', value: "${version}")
            entry(key: 'setup.application.artifact', value: "./package/SlideshowFX${project(':slideshowfx-app').ext.packaging.extension}")
            entry(key: 'setup.service.twitter.consumerKey', value: "${System.env['TWITTER_CONSUMER_KEY']}")
            entry(key: 'setup.service.twitter.consumerSecret', value: "${System.env['TWITTER_CONSUMER_SECRET']}")
        }
    }
}

jar {
    manifest {
        attributes += [
                'Implementation-Title'    : 'SlideshowFX-setup',
                'Implementation-Version'  : "${project.version}",
                'Class-Path'              : configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class'              : 'com.twasyl.slideshowfx.setup.app.SlideshowFXSetup',
                'JavaFX-Application-Class': 'com.twasyl.slideshowfx.setup.app.SlideshowFXSetup',
                'JavaFX-Version'          : '8.0+'
        ]
    }
}


task prepareBundle() {
    doLast {
        copy {
            from configurations.compile
            from jar
            into "${buildDir}/tmp/bundles"
        }

        rootProject.subprojects.findAll { it.getPluginManager().hasPlugin('sfx-plugin') }
                .each { plugin ->
                    File destination = plugin.sfxPlugin.getBundlePackageDestination(project)
             
                    if (destination != null) {
                        copy {
                            from plugin.jar
                            into destination
                        }
                    }
                }

        project(':slideshowfx-documentation').unzipDocumentationsIn("${buildDir}/tmp/bundles/package/documentations", true)
        project(':slideshowfx-documentation').unzipDocumentationsIn("${buildDir}/bundle/bundles/documentations", true)

        project(':slideshowfx-app').createBundle.outputs.files.each { file ->
            copy {
                from file
                into "${buildDir}/tmp/bundles/package/${file.name}"
            }
        }
    }
}

task cleanResidualBundlesFile(type: Delete) {
    delete fileTree(dir: project.ext.packaging.deployResourcesDir)
    delete fileTree(dir: project.ext.packaging.deployOutDir, include: '*', exclude: 'bundles')
    delete fileTree(dir: "${buildDir}/bundle/bundles", include: '*', excludes: ["documentations", "SlideshowFXSetup${project.ext.packaging.extension}"])
}

task createBundle() {
    def platform = rootProject.getPlatform()

    ant.importBuild "${projectDir}/src/assembly/javafx/SlideshowFX-setup.xml"
    ant.classpath = "${System.env['JAVA_HOME']}/lib/ant-javafx.jar"
    ant['build.deploy.out.dir'] = project.ext.packaging.deployOutDir.absolutePath
    ant['build.deploy.out.file'] = "SlideshowFXSetup"
    ant['build.deploy.resources.dir'] = project.ext.packaging.deployResourcesDir.absolutePath

    if (!project.ext.packaging.deployOutDir.exists()) {
        project.ext.packaging.deployOutDir.mkdirs()
    }

    if (platform == rootProject.ext.os.MAC) {
        logger.info('Building the OSX setup bundle')
        finalizedBy deployOSX
        deployOSX.finalizedBy cleanResidualBundlesFile
    } else if (platform == rootProject.ext.os.WINDOWS) {
        logger.info('Building the Windows setup bundle')
        finalizedBy deployWindows
        deployWindows.finalizedBy cleanResidualBundlesFile
    } else {
        logger.info('Building the unix setup bundle')
        finalizedBy deployUnknown
        deployUnknown.finalizedBy cleanResidualBundlesFile
    }

    outputs.files("${buildDir}/bundle/bundles/SlideshowFXSetup${project.ext.packaging.extension}")
}

distributions {
    main {
        baseName = "SlideshowFX-${rootProject.getPlatformAndArchitecture()}"
        contents {
            from "${buildDir}/bundle/bundles/"
        }
    }
}

prepareBundle.dependsOn jar,
        ':slideshowfx-documentation:distZip',
        ':slideshowfx-app:createBundle',
        ':slideshowfx-alert-extension:bundle',
        ':slideshowfx-box-hosting-connector:bundle',
        ':slideshowfx-code-extension:bundle',
        ':slideshowfx-drive-hosting-connector:bundle',
        ':slideshowfx-dropbox-hosting-connector:bundle',
        ':slideshowfx-go-executor:bundle',
        ':slideshowfx-golo-executor:bundle',
        ':slideshowfx-groovy-executor:bundle',
        ':slideshowfx-html:bundle',
        ':slideshowfx-image-extension:bundle',
        ':slideshowfx-java-executor:bundle',
        ':slideshowfx-javascript-executor:bundle',
        ':slideshowfx-kotlin-executor:bundle',
        ':slideshowfx-link-extension:bundle',
        ':slideshowfx-markdown:bundle',
        ':slideshowfx-quiz-extension:bundle',
        ':slideshowfx-quote-extension:bundle',
        ':slideshowfx-ruby-executor:bundle',
        ':slideshowfx-scala-executor:bundle',
        ':slideshowfx-sequence-diagram-extension:bundle',
        ':slideshowfx-shape-extension:bundle',
        ':slideshowfx-snippet-extension:bundle',
        ':slideshowfx-textile:bundle'

createBundle.dependsOn prepareBundle
distZip.dependsOn createBundle
distTar.enabled = false