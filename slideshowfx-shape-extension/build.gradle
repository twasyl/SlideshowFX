plugins {
    id 'sfx-plugin'
    id 'jacoco'
    id 'com.jfrog.bintray'
    id 'org.sonarqube'
}

description = 'Extension allowing to insert shapes inside a SlideshowFX presentation'
version = '1.1-SNAPSHOT'

dependencies {
    api project(':slideshowfx-content-extension')
    implementation project(':slideshowfx-icons')
    api project(':slideshowfx-markup')
    api project(':slideshowfx-plugin')
    api project(':slideshowfx-ui-controls')
    implementation project(':slideshowfx-utils')

    testCompile "org.mockito:mockito-core:${rootProject.ext.dependencies.mockito.version}"
}

sfxPlugin {
    contentExtension = true

    bundle {
        name = 'SlideshowFX shape extension'
        symbolicName = 'com.twasyl.slideshowfx.content.extension.shape'
        description = 'Support for inserting shapes in slides'
        activator = 'com.twasyl.slideshowfx.content.extension.shape.activator.ShapeContentExtensionActivator'
        exportPackage = 'com.twasyl.slideshowfx.content.extension.shape,com.twasyl.slideshowfx.content.extension.shape.controllers,com.twasyl.slideshowfx.content.extension.shape.activator'
        setupWizardLabel = 'Shape'
        setupWizardIconName = 'STAR'
    }
}

task createSnapSVGPackage() {
    doLast {
        def snapSvgVersion = project.findProperty('snapSvgVersion') ?: ''
        def binaryDir = new File("${buildDir}/tmp/snapsvg-update")
        def newPackageDir = new File("${binaryDir}/snapsvg", snapSvgVersion)
        def binary = new File("${binaryDir}/Snap.svg-${snapSvgVersion}.zip")
        def unpackedBinary = new File(binaryDir, "Snap.svg-${snapSvgVersion}")
        
        if (!binaryDir.exists()) {
            binaryDir.mkdirs()
        }

        if (!newPackageDir.exists()) {
            newPackageDir.mkdirs()
        }
        
        new URL("https://github.com/adobe-webplatform/Snap.svg/archive/v${snapSvgVersion}.zip").withInputStream { i ->
            binary.withOutputStream {
                it << i
            }
        }

        copy {
            from zipTree(binary)
            into binaryDir
        }
        
        binary.delete()

        copy {
            from fileTree("${unpackedBinary}/dist")
            include "snap.svg-min.js"
            into newPackageDir
        }
        
        unpackedBinary.deleteDir()
    }
}

task zipSnapSVGPackage(type: Zip) {
    archiveName = "snapsvg.zip"
    destinationDir = file("${buildDir}/tmp")
    from("${buildDir}/tmp/snapsvg-update/snapsvg") {
        into "snapsvg"
    }
}

createSnapSVGPackage.finalizedBy zipSnapSVGPackage